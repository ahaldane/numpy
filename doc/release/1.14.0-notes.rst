==========================
NumPy 1.14.0 Release Notes
==========================

This release supports Python 2.7 and 3.4 - 3.6.


Highlights
==========


New functions
=============


Deprecations
============


Future Changes
==============


Build System Changes
====================


Compatibility notes
===================


C API changes
=============


New Features
============


Improvements
============


Changes
=======

Printing of 0d arrays changed to be more consistent with scalars/ndarrays
-------------------------------------------------------------------------
Previously, the ``str`` and ``repr`` of 0d arrays had idiosyncratic
implementations which by default returned ``str(a.item())`` and ``'array(' +
repr(a.item()) + ')'`` respectively for 0d array ``a``, which was unlike both
numpy scalars and higher dimension ndarrays.

Now, by default the ``str`` of a 0d array prints like a numpy scalar, as
``str(a[()])``, and the ``repr`` prints like other ndarrays using the
``formatter`` specified using ``np.set_printoptions``.

The ``style`` argument of ``np.array2string`` has been changed. A value of
``None`` now prints the array using the ``formatter`` specified using
``np.set_printoptions``, otherwise ``style`` should be a function which accepts
a numpy scalar and returns a string, and ``style(a[()])`` is returned. The
default value is now ``style=None``.

User-defined types now need to implement ``__str__`` and ``__repr__``
---------------------------------------------------------------------
Previously user-defined types could fall back to a default implementation of
``__str__`` and ``__repr__`` implemented in numpy, but this has now been
removed. Instead, user-defined types will now fall back to the python default
``object.__str__`` and ``object.__repr__``.

Integer scalars are now unaffected by ``np.set_string_function``
----------------------------------------------------------------
Previously the ``str`` and ``repr`` of integer scalars could be controlled by
``np.set_string_function``, unlike most other numpy scalars. This is no longer
the case.

Removed unneeded whitespace in float and bool array printing
------------------------------------------------------------
The ``repr`` of float arrays now omits the whitespace character previsouly used
to display the sign if possible, for example if the array has all-positive
values.  Similarly, the ``repr`` of bool arrays with only one element now omits
the whitespace before a ``True`` value, so that ``repr(array([True]))`` now
returns ``'array([True])'`` instead of ``'array([ True])'``.
